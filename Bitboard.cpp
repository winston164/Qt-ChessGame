/*
 libagchess, a chess library in C++.
 Copyright (C) 2010-2011 Austen Green.
 
 libagchess is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 libagchess is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with libagchess.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Bitboard.h"
#include <cmath>

namespace AGChess {
    
    void print_bitboard(const Bitboard& bb)
    {
        for (int i = 7; i >= 0 ; i--) {
            for (int j = 0; j < 8; j++) {
                printf("%d ", (bb & SquaresBB[i*8 + j]) ? 1 : 0);
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;
    }
    
#pragma mark -
#pragma mark Precompute Bitboards
    
    
    Bitboard generate_ray(Square s, Direction d)
    {
        // This method should be optimized in the future
        Bitboard b = 0;
        int rank = s.rank();
        int file = s.file();
        
        int rankDir = 0;
        int fileDir = 0;
        
        if (d == nort) {
            rankDir = 1; 
            fileDir = 0;
        } else if (d == sout) {
            rankDir = -1;
            fileDir = 0;
        } else if (d == east) {
            rankDir = 0;
            fileDir = 1;
        } else if (d == west) {
            rankDir = 0;
            fileDir = -1;
        } else if (d == noEa) {
            rankDir = 1;
            fileDir = 1;
        } else if (d == soEa) {
            rankDir = -1;
            fileDir = 1;
        } else if (d == soWe) {
            rankDir = -1;
            fileDir = -1;
        } else if (d == noWe) {
            rankDir = 1;
            fileDir = -1;
        } else {
            return b;
        }
        
        
        for (int i = 0; i < 7; i++) {
            rank += rankDir;
            file += fileDir;
            b = b | squareBB(Square(rank, file));
        }
        
        return b;
    }
    
    Square squareForBitboard(Bitboard b)
    {
        if (b == 0) throw 1; // Throw because bitboard is empty
        if (b & (b-1)) throw 1; // Throw because bitboard is overpopulated
        
        // Simple logarithm trick for singly populated bitboards
        int s = log(b) / log(2);
        return Square(s);
    }
    
    int BBPopCount(Bitboard b) {
        int count = 0;
        
        while(b) {
            b &= (b-1);
            count++;
        }
        return count;
    }
    
#pragma mark -
    
    Bitboard pieceMoves(Piece p, Square s)
    {
        if (!s.isValid()) {
            return EmptyBB;
        }
        
        if (p.isPiece() && (p != Pawn)) {
            if      (p == Knight) { return PieceMovesBB[0][char(s)];}
            else if (p == Bishop) { return PieceMovesBB[1][char(s)];}
            else if (p == Rook  ) { return PieceMovesBB[2][char(s)];}
            else if (p == Queen ) { return PieceMovesBB[3][char(s)];}
            else if (p == King  ) { return PieceMovesBB[4][char(s)];}
        }
        
        return EmptyBB;
    }


#pragma mark -
#pragma mark Occupancy

    unsigned char generate_first_rank(unsigned char bb, signed char file) {
        unsigned char board = 0;
        
        for (char i = file+1; i < 8; i++) {
            board |= (1 << i); 
            if ((bb & (1 << i)) != 0) {
                break;
            } 
        }
        
        for (char i = file-1; i >= 0; i--) {
            board |= (1 << i); 
            if ((bb & (1 << i)) != 0) {
                break;
            }
        }
        return board;
    }
    
    Bitboard rank_attacks(Bitboard occupied, Square s) {
        unsigned char rank = s.rank();
        Bitboard board = occupied & RanksBB[rank]; // Mask the rank with occupied
        board = board >> (rank * 8);               // Translate to first rank
        board = occupancy_bitboards[s.file()][board];  // Get occupancy of rank from the file of s      
        return board << (rank * 8);                // Translate back to rankOf(s)
    }
    
    Bitboard file_attacks(Bitboard occupied, Square s) {
        unsigned char file = s.file();
        Bitboard board = occupied & FilesBB[file]; // Mask the file with occupied
        Bitboard adiag = 0x0102040810204080ULL;// Long antidiagonal h1-a8
        board = board >> file;                     // Translate to a-file
        board *= adiag;                            // Multiply to get a-file bits on 8th rank
        board = board >> 56;                       // Shift to first rank
        board = occupancy_bitboards[s.rank()][board]; // Get occupancy
        
        /*  Original code
        board = (board * adiag) & FilesBB[0];      // Multiply back to a-file and get only bits on a-file
        board = board << file;                     // Translate back to original file
        */
        
        /* Modified code */
        board = (board * 0x0202020202ULL & 0x010884422010ULL) % 1023; // Reverse bits
        board = (board * longDiag) & FilesBB[7];
        board = board >> (7 - file); // Shift to correct file
        
        return board;
    }
    
    Bitboard diagonal_attacks(Bitboard occupied, Square s) {
        unsigned char rank = s.rank();
        unsigned char file = s.file();  // Also serves as index
    
        Bitboard diag = longDiag; // Long diagonal a1-h8
        
        // Adjust the mask based on the square
        if (rank < file) { // Below the main diagonal
            diag = diag >> ((file - rank) * 8);
        } else if (rank > file) { // Above the main diagonal
            diag = diag << ((rank - file) * 8);
        } // else on the main diagonal no adjustment needed
        
        Bitboard board = (occupied & diag) * FilesBB[0];  // Mask the diagonal with occupied and 
                                                          // Multiply to get bits on 8th rank
        board = occupancy_bitboards[file][board >> 56];   // Get occupancy
        board *= FilesBB[0];                              // Fill each byte of the bitboard with occupancy
        board &= diag;                                    // Mask with the diagonal
                
        return board;
    }
    
    Bitboard antidiagonal_attacks(Bitboard occupied, Square s) {
        occupied |= squareBB(s);
        unsigned char rank = s.rank();
        unsigned char file = 7 - s.file();
        
        Bitboard adiag = longAdiag; // Long antidiagonal h1-a8
        
        if (rank < file) { // Below the main diagonal
            adiag = adiag >> ((file - rank) * 8);
        } else if (rank > file) { // Above the main diagonal
            adiag = adiag << ((rank - file) * 8);
        } // else on the main diagonal no adjustment needed
                
        Bitboard board = (occupied & adiag);  // Mask the diagonal with occupied and 
        board *= FilesBB[0]; // Multiply to get bits on 8th rank
        board = occupancy_bitboards[s.file()][board >> 56];   // Get occupancy
        board *= FilesBB[0];                              // Fill each byte of the bitboard with occupancy
        board &= adiag;                                    // Mask with the diagonal

        return board;
    }
    
    
#pragma mark -
#pragma mark Precomputed Bitboards
    
    const Bitboard RanksBB[8] =	{
        0x00000000000000FFULL,
        0x000000000000FF00ULL,
        0x0000000000FF0000ULL, 
        0x00000000FF000000ULL, 
        0x000000FF00000000ULL,
        0x0000FF0000000000ULL, 
        0x00FF000000000000ULL, 
        0xFF00000000000000ULL};
    
    const Bitboard FilesBB[8] = {
        0x0101010101010101ULL, 
        0x0202020202020202ULL,
        0x0404040404040404ULL, 
        0x0808080808080808ULL, 
        0x1010101010101010ULL,
        0x2020202020202020ULL, 
        0x4040404040404040ULL, 
        0x8080808080808080ULL};
    
    const Bitboard SquaresBB[65] = {
        0x0000000000000001ULL, 0x0000000000000002ULL, 0x0000000000000004ULL, 0x0000000000000008ULL,
        0x0000000000000010ULL, 0x0000000000000020ULL, 0x0000000000000040ULL, 0x0000000000000080ULL,
        0x0000000000000100ULL, 0x0000000000000200ULL, 0x0000000000000400ULL, 0x0000000000000800ULL,
        0x0000000000001000ULL, 0x0000000000002000ULL, 0x0000000000004000ULL, 0x0000000000008000ULL,
        0x0000000000010000ULL, 0x0000000000020000ULL, 0x0000000000040000ULL, 0x0000000000080000ULL,
        0x0000000000100000ULL, 0x0000000000200000ULL, 0x0000000000400000ULL, 0x0000000000800000ULL,
        0x0000000001000000ULL, 0x0000000002000000ULL, 0x0000000004000000ULL, 0x0000000008000000ULL,
        0x0000000010000000ULL, 0x0000000020000000ULL, 0x0000000040000000ULL, 0x0000000080000000ULL,
        0x0000000100000000ULL, 0x0000000200000000ULL, 0x0000000400000000ULL, 0x0000000800000000ULL,
        0x0000001000000000ULL, 0x0000002000000000ULL, 0x0000004000000000ULL, 0x0000008000000000ULL,
        0x0000010000000000ULL, 0x0000020000000000ULL, 0x0000040000000000ULL, 0x0000080000000000ULL,
        0x0000100000000000ULL, 0x0000200000000000ULL, 0x0000400000000000ULL, 0x0000800000000000ULL,
        0x0001000000000000ULL, 0x0002000000000000ULL, 0x0004000000000000ULL, 0x0008000000000000ULL,
        0x0010000000000000ULL, 0x0020000000000000ULL, 0x0040000000000000ULL, 0x0080000000000000ULL,
        0x0100000000000000ULL, 0x0200000000000000ULL, 0x0400000000000000ULL, 0x0800000000000000ULL,
        0x1000000000000000ULL, 0x2000000000000000ULL, 0x4000000000000000ULL, 0x8000000000000000ULL,
        0x0000000000000000ULL // empty bitboard
    };
    
    const Bitboard PieceMovesBB[5][64] = {
        // Knight moves
        {
            0x0000000000020400ULL,
            0x0000000000050800ULL,
            0x00000000000A1100ULL,
            0x0000000000142200ULL,
            0x0000000000284400ULL,
            0x0000000000508800ULL,
            0x0000000000A01000ULL,
            0x0000000000402000ULL,
            0x0000000002040004ULL,
            0x0000000005080008ULL,
            0x000000000A110011ULL,
            0x0000000014220022ULL,
            0x0000000028440044ULL,
            0x0000000050880088ULL,
            0x00000000A0100010ULL,
            0x0000000040200020ULL,
            0x0000000204000402ULL,
            0x0000000508000805ULL,
            0x0000000A1100110AULL,
            0x0000001422002214ULL,
            0x0000002844004428ULL,
            0x0000005088008850ULL,
            0x000000A0100010A0ULL,
            0x0000004020002040ULL,
            0x0000020400040200ULL,
            0x0000050800080500ULL,
            0x00000A1100110A00ULL,
            0x0000142200221400ULL,
            0x0000284400442800ULL,
            0x0000508800885000ULL,
            0x0000A0100010A000ULL,
            0x0000402000204000ULL,
            0x0002040004020000ULL,
            0x0005080008050000ULL,
            0x000A1100110A0000ULL,
            0x0014220022140000ULL,
            0x0028440044280000ULL,
            0x0050880088500000ULL,
            0x00A0100010A00000ULL,
            0x0040200020400000ULL,
            0x0204000402000000ULL,
            0x0508000805000000ULL,
            0x0A1100110A000000ULL,
            0x1422002214000000ULL,
            0x2844004428000000ULL,
            0x5088008850000000ULL,
            0xA0100010A0000000ULL,
            0x4020002040000000ULL,
            0x0400040200000000ULL,
            0x0800080500000000ULL,
            0x1100110A00000000ULL,
            0x2200221400000000ULL,
            0x4400442800000000ULL,
            0x8800885000000000ULL,
            0x100010A000000000ULL,
            0x2000204000000000ULL,
            0x0004020000000000ULL,
            0x0008050000000000ULL,
            0x00110A0000000000ULL,
            0x0022140000000000ULL,
            0x0044280000000000ULL,
            0x0088500000000000ULL,
            0x0010A00000000000ULL,
            0x0020400000000000ULL},
        // Bishop moves
        {
            0x8040201008040200ULL,
            0x0080402010080500ULL,
            0x0000804020110A00ULL,
            0x0000008041221400ULL,
            0x0000000182442800ULL,
            0x0000010204885000ULL,
            0x000102040810A000ULL,
            0x0102040810204000ULL,
            0x4020100804020002ULL,
            0x8040201008050005ULL,
            0x00804020110A000AULL,
            0x0000804122140014ULL,
            0x0000018244280028ULL,
            0x0001020488500050ULL,
            0x0102040810A000A0ULL,
            0x0204081020400040ULL,
            0x2010080402000204ULL,
            0x4020100805000508ULL,
            0x804020110A000A11ULL,
            0x0080412214001422ULL,
            0x0001824428002844ULL,
            0x0102048850005088ULL,
            0x02040810A000A010ULL,
            0x0408102040004020ULL,
            0x1008040200020408ULL,
            0x2010080500050810ULL,
            0x4020110A000A1120ULL,
            0x8041221400142241ULL,
            0x0182442800284482ULL,
            0x0204885000508804ULL,
            0x040810A000A01008ULL,
            0x0810204000402010ULL,
            0x0804020002040810ULL,
            0x1008050005081020ULL,
            0x20110A000A112040ULL,
            0x4122140014224180ULL,
            0x8244280028448201ULL,
            0x0488500050880402ULL,
            0x0810A000A0100804ULL,
            0x1020400040201008ULL,
            0x0402000204081020ULL,
            0x0805000508102040ULL,
            0x110A000A11204080ULL,
            0x2214001422418000ULL,
            0x4428002844820100ULL,
            0x8850005088040201ULL,
            0x10A000A010080402ULL,
            0x2040004020100804ULL,
            0x0200020408102040ULL,
            0x0500050810204080ULL,
            0x0A000A1120408000ULL,
            0x1400142241800000ULL,
            0x2800284482010000ULL,
            0x5000508804020100ULL,
            0xA000A01008040201ULL,
            0x4000402010080402ULL,
            0x0002040810204080ULL,
            0x0005081020408000ULL,
            0x000A112040800000ULL,
            0x0014224180000000ULL,
            0x0028448201000000ULL,
            0x0050880402010000ULL,
            0x00A0100804020100ULL,
            0x0040201008040201ULL},
        // Rook moves
        {
            0x01010101010101FEULL,
            0x02020202020202FDULL,
            0x04040404040404FBULL,
            0x08080808080808F7ULL,
            0x10101010101010EFULL,
            0x20202020202020DFULL,
            0x40404040404040BFULL,
            0x808080808080807FULL,
            0x010101010101FE01ULL,
            0x020202020202FD02ULL,
            0x040404040404FB04ULL,
            0x080808080808F708ULL,
            0x101010101010EF10ULL,
            0x202020202020DF20ULL,
            0x404040404040BF40ULL,
            0x8080808080807F80ULL,
            0x0101010101FE0101ULL,
            0x0202020202FD0202ULL,
            0x0404040404FB0404ULL,
            0x0808080808F70808ULL,
            0x1010101010EF1010ULL,
            0x2020202020DF2020ULL,
            0x4040404040BF4040ULL,
            0x80808080807F8080ULL,
            0x01010101FE010101ULL,
            0x02020202FD020202ULL,
            0x04040404FB040404ULL,
            0x08080808F7080808ULL,
            0x10101010EF101010ULL,
            0x20202020DF202020ULL,
            0x40404040BF404040ULL,
            0x808080807F808080ULL,
            0x010101FE01010101ULL,
            0x020202FD02020202ULL,
            0x040404FB04040404ULL,
            0x080808F708080808ULL,
            0x101010EF10101010ULL,
            0x202020DF20202020ULL,
            0x404040BF40404040ULL,
            0x8080807F80808080ULL,
            0x0101FE0101010101ULL,
            0x0202FD0202020202ULL,
            0x0404FB0404040404ULL,
            0x0808F70808080808ULL,
            0x1010EF1010101010ULL,
            0x2020DF2020202020ULL,
            0x4040BF4040404040ULL,
            0x80807F8080808080ULL,
            0x01FE010101010101ULL,
            0x02FD020202020202ULL,
            0x04FB040404040404ULL,
            0x08F7080808080808ULL,
            0x10EF101010101010ULL,
            0x20DF202020202020ULL,
            0x40BF404040404040ULL,
            0x807F808080808080ULL,
            0xFE01010101010101ULL,
            0xFD02020202020202ULL,
            0xFB04040404040404ULL,
            0xF708080808080808ULL,
            0xEF10101010101010ULL,
            0xDF20202020202020ULL,
            0xBF40404040404040ULL,
            0x7F80808080808080ULL},
        // Queen moves
        {
            0x81412111090503FEULL,
            0x02824222120A07FDULL,
            0x0404844424150EFBULL,
            0x08080888492A1CF7ULL,
            0x10101011925438EFULL,
            0x2020212224A870DFULL,
            0x404142444850E0BFULL,
            0x8182848890A0C07FULL,
            0x412111090503FE03ULL,
            0x824222120A07FD07ULL,
            0x04844424150EFB0EULL,
            0x080888492A1CF71CULL,
            0x101011925438EF38ULL,
            0x20212224A870DF70ULL,
            0x4142444850E0BFE0ULL,
            0x82848890A0C07FC0ULL,
            0x2111090503FE0305ULL,
            0x4222120A07FD070AULL,
            0x844424150EFB0E15ULL,
            0x0888492A1CF71C2AULL,
            0x1011925438EF3854ULL,
            0x212224A870DF70A8ULL,
            0x42444850E0BFE050ULL,
            0x848890A0C07FC0A0ULL,
            0x11090503FE030509ULL,
            0x22120A07FD070A12ULL,
            0x4424150EFB0E1524ULL,
            0x88492A1CF71C2A49ULL,
            0x11925438EF385492ULL,
            0x2224A870DF70A824ULL,
            0x444850E0BFE05048ULL,
            0x8890A0C07FC0A090ULL,
            0x090503FE03050911ULL,
            0x120A07FD070A1222ULL,
            0x24150EFB0E152444ULL,
            0x492A1CF71C2A4988ULL,
            0x925438EF38549211ULL,
            0x24A870DF70A82422ULL,
            0x4850E0BFE0504844ULL,
            0x90A0C07FC0A09088ULL,
            0x0503FE0305091121ULL,
            0x0A07FD070A122242ULL,
            0x150EFB0E15244484ULL,
            0x2A1CF71C2A498808ULL,
            0x5438EF3854921110ULL,
            0xA870DF70A8242221ULL,
            0x50E0BFE050484442ULL,
            0xA0C07FC0A0908884ULL,
            0x03FE030509112141ULL,
            0x07FD070A12224282ULL,
            0x0EFB0E1524448404ULL,
            0x1CF71C2A49880808ULL,
            0x38EF385492111010ULL,
            0x70DF70A824222120ULL,
            0xE0BFE05048444241ULL,
            0xC07FC0A090888482ULL,
            0xFE03050911214181ULL,
            0xFD070A1222428202ULL,
            0xFB0E152444840404ULL,
            0xF71C2A4988080808ULL,
            0xEF38549211101010ULL,
            0xDF70A82422212020ULL,
            0xBFE0504844424140ULL,
            0x7FC0A09088848281ULL}, 
        // King moves
        {
            0x0000000000000302ULL,
            0x0000000000000705ULL,
            0x0000000000000E0AULL,
            0x0000000000001C14ULL,
            0x0000000000003828ULL,
            0x0000000000007050ULL,
            0x000000000000E0A0ULL,
            0x000000000000C040ULL,
            0x0000000000030203ULL,
            0x0000000000070507ULL,
            0x00000000000E0A0EULL,
            0x00000000001C141CULL,
            0x0000000000382838ULL,
            0x0000000000705070ULL,
            0x0000000000E0A0E0ULL,
            0x0000000000C040C0ULL,
            0x0000000003020300ULL,
            0x0000000007050700ULL,
            0x000000000E0A0E00ULL,
            0x000000001C141C00ULL,
            0x0000000038283800ULL,
            0x0000000070507000ULL,
            0x00000000E0A0E000ULL,
            0x00000000C040C000ULL,
            0x0000000302030000ULL,
            0x0000000705070000ULL,
            0x0000000E0A0E0000ULL,
            0x0000001C141C0000ULL,
            0x0000003828380000ULL,
            0x0000007050700000ULL,
            0x000000E0A0E00000ULL,
            0x000000C040C00000ULL,
            0x0000030203000000ULL,
            0x0000070507000000ULL,
            0x00000E0A0E000000ULL,
            0x00001C141C000000ULL,
            0x0000382838000000ULL,
            0x0000705070000000ULL,
            0x0000E0A0E0000000ULL,
            0x0000C040C0000000ULL,
            0x0003020300000000ULL,
            0x0007050700000000ULL,
            0x000E0A0E00000000ULL,
            0x001C141C00000000ULL,
            0x0038283800000000ULL,
            0x0070507000000000ULL,
            0x00E0A0E000000000ULL,
            0x00C040C000000000ULL,
            0x0302030000000000ULL,
            0x0705070000000000ULL,
            0x0E0A0E0000000000ULL,
            0x1C141C0000000000ULL,
            0x3828380000000000ULL,
            0x7050700000000000ULL,
            0xE0A0E00000000000ULL,
            0xC040C00000000000ULL,
            0x0203000000000000ULL,
            0x0507000000000000ULL,
            0x0A0E000000000000ULL,
            0x141C000000000000ULL,
            0x2838000000000000ULL,
            0x5070000000000000ULL,
            0xA0E0000000000000ULL,
            0x40C0000000000000ULL }
        
    };

    const unsigned char occupancy_bitboards[8][256] = {
        {
            0xfe,0xfe,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x3e,0x3e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x7e,0x7e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x3e,0x3e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0xfe,0xfe,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x3e,0x3e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x7e,0x7e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x3e,0x3e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02,
            0x1e,0x1e,0x02,0x02,0x06,0x06,0x02,0x02,0x0e,0x0e,0x02,0x02,0x06,0x06,0x02,0x02
        },
        
        {
            0xfd,0xfd,0xfd,0xfd,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x3d,0x3d,0x3d,0x3d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x7d,0x7d,0x7d,0x7d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x3d,0x3d,0x3d,0x3d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0xfd,0xfd,0xfd,0xfd,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x3d,0x3d,0x3d,0x3d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x7d,0x7d,0x7d,0x7d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x3d,0x3d,0x3d,0x3d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05,
            0x1d,0x1d,0x1d,0x1d,0x05,0x05,0x05,0x05,0x0d,0x0d,0x0d,0x0d,0x05,0x05,0x05,0x05
        },
        
        {
            0xfb,0xfb,0xfa,0xfa,0xfb,0xfb,0xfa,0xfa,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x3b,0x3b,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x7b,0x7b,0x7a,0x7a,0x7b,0x7b,0x7a,0x7a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x3b,0x3b,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0xfb,0xfb,0xfa,0xfa,0xfb,0xfb,0xfa,0xfa,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x3b,0x3b,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x7b,0x7b,0x7a,0x7a,0x7b,0x7b,0x7a,0x7a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x3b,0x3b,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a,
            0x1b,0x1b,0x1a,0x1a,0x1b,0x1b,0x1a,0x1a,0x0b,0x0b,0x0a,0x0a,0x0b,0x0b,0x0a,0x0a
        },
        
        {
            0xf7,0xf7,0xf6,0xf6,0xf4,0xf4,0xf4,0xf4,0xf7,0xf7,0xf6,0xf6,0xf4,0xf4,0xf4,0xf4,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0x77,0x77,0x76,0x76,0x74,0x74,0x74,0x74,0x77,0x77,0x76,0x76,0x74,0x74,0x74,0x74,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0xf7,0xf7,0xf6,0xf6,0xf4,0xf4,0xf4,0xf4,0xf7,0xf7,0xf6,0xf6,0xf4,0xf4,0xf4,0xf4,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0x77,0x77,0x76,0x76,0x74,0x74,0x74,0x74,0x77,0x77,0x76,0x76,0x74,0x74,0x74,0x74,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,
            0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,
            0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14,0x17,0x17,0x16,0x16,0x14,0x14,0x14,0x14
        },
        
        {
            0xef,0xef,0xee,0xee,0xec,0xec,0xec,0xec,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,
            0xef,0xef,0xee,0xee,0xec,0xec,0xec,0xec,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0x6f,0x6f,0x6e,0x6e,0x6c,0x6c,0x6c,0x6c,0x68,0x68,0x68,0x68,0x68,0x68,0x68,0x68,
            0x6f,0x6f,0x6e,0x6e,0x6c,0x6c,0x6c,0x6c,0x68,0x68,0x68,0x68,0x68,0x68,0x68,0x68,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0xef,0xef,0xee,0xee,0xec,0xec,0xec,0xec,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,
            0xef,0xef,0xee,0xee,0xec,0xec,0xec,0xec,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0x6f,0x6f,0x6e,0x6e,0x6c,0x6c,0x6c,0x6c,0x68,0x68,0x68,0x68,0x68,0x68,0x68,0x68,
            0x6f,0x6f,0x6e,0x6e,0x6c,0x6c,0x6c,0x6c,0x68,0x68,0x68,0x68,0x68,0x68,0x68,0x68,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,
            0x2f,0x2f,0x2e,0x2e,0x2c,0x2c,0x2c,0x2c,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28
        },
        
        {
            0xdf,0xdf,0xde,0xde,0xdc,0xdc,0xdc,0xdc,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,
            0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,
            0xdf,0xdf,0xde,0xde,0xdc,0xdc,0xdc,0xdc,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,
            0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,
            0x5f,0x5f,0x5e,0x5e,0x5c,0x5c,0x5c,0x5c,0x58,0x58,0x58,0x58,0x58,0x58,0x58,0x58,
            0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
            0x5f,0x5f,0x5e,0x5e,0x5c,0x5c,0x5c,0x5c,0x58,0x58,0x58,0x58,0x58,0x58,0x58,0x58,
            0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
            0xdf,0xdf,0xde,0xde,0xdc,0xdc,0xdc,0xdc,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,
            0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,
            0xdf,0xdf,0xde,0xde,0xdc,0xdc,0xdc,0xdc,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,0xd8,
            0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,0xd0,
            0x5f,0x5f,0x5e,0x5e,0x5c,0x5c,0x5c,0x5c,0x58,0x58,0x58,0x58,0x58,0x58,0x58,0x58,
            0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
            0x5f,0x5f,0x5e,0x5e,0x5c,0x5c,0x5c,0x5c,0x58,0x58,0x58,0x58,0x58,0x58,0x58,0x58,
            0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50
        },
        
        {
            0xbf,0xbf,0xbe,0xbe,0xbc,0xbc,0xbc,0xbc,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,
            0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xbf,0xbf,0xbe,0xbe,0xbc,0xbc,0xbc,0xbc,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,
            0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xbf,0xbf,0xbe,0xbe,0xbc,0xbc,0xbc,0xbc,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,
            0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xbf,0xbf,0xbe,0xbe,0xbc,0xbc,0xbc,0xbc,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,0xb8,
            0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,0xb0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,
            0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0
        },
        
        {
            0x7f,0x7f,0x7e,0x7e,0x7c,0x7c,0x7c,0x7c,0x78,0x78,0x78,0x78,0x78,0x78,0x78,0x78,
            0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,
            0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
            0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x7f,0x7f,0x7e,0x7e,0x7c,0x7c,0x7c,0x7c,0x78,0x78,0x78,0x78,0x78,0x78,0x78,0x78,
            0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,
            0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
            0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
        }
    };
    
}